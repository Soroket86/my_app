from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from telegram.utils.request import Request
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import os
import time
import re

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ ===
with open("kol_dogovor.txt", "r", encoding="utf-8") as f:
    pdf_text = f.read()

# === –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ç—å–∏/—Ä–∞–∑–¥–µ–ª—ã ===
sections = re.split(r"(–†–ê–ó–î–ï–õ\s+\d+\..*|–°–¢–ê–¢–¨–Ø\s+\d+\..*)", pdf_text, flags=re.IGNORECASE)
articles = []
for i in range(1, len(sections), 2):
    header = sections[i].strip()
    body = sections[i+1].strip() if i+1 < len(sections) else ""
    articles.append(header + "\n" + body)

# === –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
vectorizer = TfidfVectorizer()

# –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è, –ø–æ–¥—Å—Ç–∞–≤–∏–º –ø—Ä–∏–º–µ—Ä—ã –≤—Ä—É—á–Ω—É—é
if not articles or len(articles) < 3:
    articles = [
        "–†–ê–ó–î–ï–õ 1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è\n–ù–∞—Å—Ç–æ—è—â–∏–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç —Ç—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏.",
        "–°–¢–ê–¢–¨–Ø 5. –û—Ç–ø—É—Å–∫–∞\n–†–∞–±–æ—Ç–Ω–∏–∫–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–≥–æ–¥–Ω—ã–π –æ—Ç–ø—É—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–µ –º–µ–Ω–µ–µ 28 –¥–Ω–µ–π.",
        "–°–¢–ê–¢–¨–Ø 7. –ú–æ–ª–æ–¥—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã\n–ú–æ–ª–æ–¥—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª—å–≥–æ—Ç—ã –∏ –≤—ã–ø–ª–∞—Ç—ã."
    ]
X = vectorizer.fit_transform(articles)

def find_article(question):
    q_vec = vectorizer.transform([question])
    similarity = cosine_similarity(q_vec, X)
    best_idx = similarity.argmax()
    return articles[best_idx]

# === –ö–æ–º–∞–Ω–¥—ã ===
def start(update: Update, context: CallbackContext):
    keyboard = [["üü¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"], ["üì¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ—Ñ—Å–æ—é–∑–æ–º"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=reply_markup)

def handle_menu(update: Update, context: CallbackContext):
    text = update.message.text
    if "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" in text:
        update.message.reply_text("üìÑ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n¬´–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞ —É —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Å –Ω–µ–Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º?¬ª")
    elif "–°–≤—è–∑–∞—Ç—å—Å—è" in text:
        update.message.reply_text("üì¨ –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ—Å–æ—é–∑ –ø–æ email: profcom@avtovaz.ru")
    elif "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" in text:
        update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
    else:
        result = find_article(text)
        update.message.reply_text(result[:3000])  # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π

def main():
    token = os.getenv("TELEGRAM_TOKEN")
    request = Request(connect_timeout=10.0, read_timeout=10.0, con_pool_size=8)
    bot = Bot(token=token, request=request)

    updater = Updater(bot=bot, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_menu))

    print("‚è≥ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    time.sleep(2)
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
